name: CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17', '21' ]
        
    steps:

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        cache: maven

    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build and run unit tests
      working-directory: projX/demo
      run: mvn -B package --file pom.xml -Djava.version=${{ matrix.java }}

    - name: Run integration tests
      working-directory: projX/demo
      run: mvn -B integration-test verify --file pom.xml -Djava.version=${{ matrix.java }}

    - name: SonarQube analysis
      if: ${{ matrix.java == '17' }} 
      working-directory: projX/demo
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=TQS-2025-P3_TQS_Project

    - name: Add code coverage information to PR
      id: jacoco-pr
      uses: madrapps/jacoco-report@v1.7.1
      if: github.event_name == 'pull_request'
      with:
        paths: |
          ${{ github.workspace }}/**/target/site/jacoco-merged-test-coverage-report/jacoco.xml 
        token: ${{ secrets.GITHUB_TOKEN }}
        min-coverage-overall: 80
        min-coverage-changed-files: 80

    - name: Push results to Xray on Jira Cloud
      if: always()
      working-directory: projX/demo
      env:
        XRAYCLOUD_CLIENT_ID: ${{ secrets.XRAYCLOUD_CLIENT_ID }}
        XRAYCLOUD_CLIENT_SECRET: ${{ secrets.XRAYCLOUD_CLIENT_SECRET }}
        XRAYCLOUD_TEST_PLAN_KEY: ${{ vars.XRAYCLOUD_TEST_PLAN_KEY }}
        REVISON: ${{ github.ref_name}}
        TEST_ENVIRONMENT: java${{ matrix.java }}
      run: mvn -Dxray.clientId=$XRAYCLOUD_CLIENT_ID -Dxray.clientSecret=$XRAYCLOUD_CLIENT_SECRET -Dxray.testEnvironment=$TEST_ENVIRONMENT -Dxray.testPlanKey=$XRAYCLOUD_TEST_PLAN_KEY -Dxray.revision=$REVISON xray:import-results  
